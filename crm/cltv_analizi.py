# -*- coding: utf-8 -*-
"""CLTV Analizi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZMkfzPG_TJQTWGA-8pBb6Dko4Z2oyz39
"""

# Değişkenler
#
# InvoiceNo: Fatura numarası. Her işleme yani faturaya ait eşsiz numara. C ile başlıyorsa iptal edilen işlem.
# StockCode: Ürün kodu. Her bir ürün için eşsiz numara.
# Description: Ürün ismi
# Quantity: Ürün adedi. Faturalardaki ürünlerden kaçar tane satıldığını ifade etmektedir.
# InvoiceDate: Fatura tarihi ve zamanı.
# UnitPrice: Ürün fiyatı (Sterlin cinsinden)
# CustomerID: Eşsiz müşteri numarası
# Country: Ülke ismi. Müşterinin yaşadığı ülke.

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
pd.set_option('display.max_columns', None)
#pd.set_option('display.max_rows', None)
pd.set_option('display.float_format', lambda x: '%.5f' % x)

df_ = pd.read_excel('/content/online_retail_II.xlsx',sheet_name='Year 2009-2010')
df=df_.copy()

df.describe()

df.isnull().sum()

df[df['Invoice'].str.contains('C',na=False)]

df = df[~df['Invoice'].str.contains('C',na=False)]

df.head(25)

df = df[df['Quantity']>0]

df.dropna(inplace=True)

df['TotalPrice']=df['Quantity']*df['Price']

df.describe()

###########################################
# CUSTOMER LIFETIME VALUE (Müşteri Yaşam Boyu Değeri)
############################################

# 1. Veri Hazırlama
# 2. Average Order Value (average_order_value = total_price / total_transaction)
# 3. Purchase Frequency (total_transaction / total_number_of_customers)
# 4. Repeat Rate & Churn Rate (birden fazla alışveriş yapan müşteri sayısı / tüm müşteriler)
# 5. Profit Margin (profit_margin =  total_price * 0.10)
# 6. Customer Value (customer_value = average_order_value * purchase_frequency)
# 7. Customer Lifetime Value (CLTV = (customer_value / churn_rate) x profit_margin)
# 8. Segmentlerin Oluşturulması
# 9. BONUS: Tüm İşlemlerin Fonksiyonlaştırılması

cltv_cc = df.groupby('Customer ID').agg({
    'Invoice': 'nunique',#totaltransaction
    'Quantity':'sum',#frequency
    'TotalPrice':'sum',#totalprice
})

cltv_cc.columns=['Total_Transaction','Frequency','Total_Price']

cltv_cc['average_order_value'] = cltv_cc['Total_Price']/cltv_cc['Total_Transaction']

cltv_cc

total_number_of_customers = df['Customer ID'].nunique()

#Purchase Frequency (total_transaction / total_number_of_customers)
cltv_cc['purchase_freq'] = cltv_cc['Total_Transaction']/cltv_cc.shape[0]

#Repeat Rate & Churn Rate (birden fazla alışveriş yapan müşteri sayısı / tüm müşteriler)
repeat_rate = cltv_cc[cltv_cc['Total_Transaction']>1].shape[0] / cltv_cc.shape[0]

churn_rate = 1 - repeat_rate

cltv_cc['profit_margin'] = cltv_cc['Total_Price'] * 0.10

cltv_cc['customer_value'] = (cltv_cc['average_order_value']) * (cltv_cc['purchase_freq'])

cltv_cc['CLTV']= (cltv_cc['customer_value']/churn_rate) * cltv_cc['profit_margin']

cltv_cc.head()

cltv_cc[cltv_cc['Total_Transaction'] > 1].shape[0]

cltv_cc['Segmentation'] = pd.qcut(cltv_cc['CLTV'], 10, labels= [1,2,3,4,5,6,7,8,9,10])

cltv_cc.head()

cltv_cc.sort_values(by='CLTV', ascending=False)

cltv_cc.groupby('Segmentation').agg({'count','mean','sum','max','min'})

cltv_cc.to_csv('cltv.csv')

def
